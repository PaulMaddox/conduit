syntax = "proto3";

package conduit.proxy.route;

import "common/common.proto";
import "proxy/netmatch/netmatch.proto";

service Route {
  rpc InboundAcceptPolicy(InbounAcceptPolicyRequest) returns (stream InboundAcceptPolicy) {}
  rpc OutboundAcceptPolicy(OutboundAcceptPolicyRequest) returns (stream OutboundAcceptPolicy) {}
}

message InboundAcceptPolicyRequest {
}

message InboundAcceptPolicy {
  repeated OpaqueEndpoints opaque_endpoints = 1;
}

message OutboundAcceptPolicyRequest {
}

message OutboundAcceptPolicy {
  repeated OpaqueEndpoint opaque_endpoints = 1;
}


// Matches a set of endpoints considered to be "opaque" TCP endpoints on which protocol
// detection should be bypassed.
message OpaqueEndpoints {
  Netmask netmask = 1;
  repeated uint32 ports = 2;

  message Netmask {
    common.IPAddress ip = 1;
    uint32 mask = 2;
  }
}
